/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockKyc,
  MockKycInterface,
} from "../../../contracts/Mocks/MockKyc";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "hasValidToken",
    outputs: [
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setIsValid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610109806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639d267630146037578063cbec8c81146074575b600080fd5b6060604236600460a5565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b60a3607f36600460a5565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b005b60006020828403121560b657600080fd5b81356001600160a01b038116811460cc57600080fd5b939250505056fea2646970667358221220640afbd2728a488d3e77a565ade409c096ae8edd39d18c49cad349a25c24587264736f6c63430008110033";

type MockKycConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockKycConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockKyc__factory extends ContractFactory {
  constructor(...args: MockKycConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockKyc> {
    return super.deploy(overrides || {}) as Promise<MockKyc>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockKyc {
    return super.attach(address) as MockKyc;
  }
  override connect(signer: Signer): MockKyc__factory {
    return super.connect(signer) as MockKyc__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockKycInterface {
    return new utils.Interface(_abi) as MockKycInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockKyc {
    return new Contract(address, _abi, signerOrProvider) as MockKyc;
  }
}
