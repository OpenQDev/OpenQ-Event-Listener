/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OpenQDefinitions {
  export type InitOperationStruct = {
    operationType: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type InitOperationStructOutput = [number, string] & {
    operationType: number;
    data: string;
  };
}

export interface ITieredPercentageBountyInterface extends utils.Interface {
  functions: {
    "bountyClosedTime()": FunctionFragment;
    "bountyCreatedTime()": FunctionFragment;
    "bountyId()": FunctionFragment;
    "bountyType()": FunctionFragment;
    "claimNft(address,bytes32)": FunctionFragment;
    "claimTiered(address,uint256,address)": FunctionFragment;
    "closeCompetition()": FunctionFragment;
    "closer()": FunctionFragment;
    "closerData()": FunctionFragment;
    "depositTime(bytes32)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "expiration(bytes32)": FunctionFragment;
    "extendDeposit(bytes32,uint256,address)": FunctionFragment;
    "funder(bytes32)": FunctionFragment;
    "fundingGoal()": FunctionFragment;
    "fundingToken()": FunctionFragment;
    "getInvoiceComplete()": FunctionFragment;
    "getLockedFunds(address)": FunctionFragment;
    "getNftDeposits()": FunctionFragment;
    "getPayoutSchedule()": FunctionFragment;
    "getSupportingDocumentsComplete()": FunctionFragment;
    "getTierWinners()": FunctionFragment;
    "getTokenAddresses()": FunctionFragment;
    "getTokenAddressesCount()": FunctionFragment;
    "getTokenBalance(address)": FunctionFragment;
    "hasFundingGoal()": FunctionFragment;
    "initialize(string,address,string,address,address,address,(uint32,bytes))": FunctionFragment;
    "invoiceComplete(uint256)": FunctionFragment;
    "invoiceRequired()": FunctionFragment;
    "isNFT(bytes32)": FunctionFragment;
    "issuer()": FunctionFragment;
    "issuerExternalUserId()": FunctionFragment;
    "kycRequired()": FunctionFragment;
    "nftDepositLimit()": FunctionFragment;
    "nftDeposits(uint256)": FunctionFragment;
    "organization()": FunctionFragment;
    "payoutAddress(bytes32)": FunctionFragment;
    "receiveFunds(address,address,uint256,uint256)": FunctionFragment;
    "receiveNft(address,address,uint256,uint256,bytes)": FunctionFragment;
    "refundDeposit(bytes32,address,uint256)": FunctionFragment;
    "refunded(bytes32)": FunctionFragment;
    "setFundingGoal(address,uint256)": FunctionFragment;
    "setInvoiceComplete(bytes)": FunctionFragment;
    "setInvoiceRequired(bool)": FunctionFragment;
    "setKycRequired(bool)": FunctionFragment;
    "setPayoutSchedule(uint256[])": FunctionFragment;
    "setSupportingDocumentsComplete(bytes)": FunctionFragment;
    "setSupportingDocumentsRequired(bool)": FunctionFragment;
    "setTierClaimed(uint256)": FunctionFragment;
    "setTierWinner(string,uint256)": FunctionFragment;
    "status()": FunctionFragment;
    "supportingDocumentsComplete(uint256)": FunctionFragment;
    "supportingDocumentsRequired()": FunctionFragment;
    "tier(bytes32)": FunctionFragment;
    "tierClaimed(uint256)": FunctionFragment;
    "tierWinners(uint256)": FunctionFragment;
    "tokenAddress(bytes32)": FunctionFragment;
    "tokenId(bytes32)": FunctionFragment;
    "volume(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bountyClosedTime"
      | "bountyCreatedTime"
      | "bountyId"
      | "bountyType"
      | "claimNft"
      | "claimTiered"
      | "closeCompetition"
      | "closer"
      | "closerData"
      | "depositTime"
      | "deposits"
      | "expiration"
      | "extendDeposit"
      | "funder"
      | "fundingGoal"
      | "fundingToken"
      | "getInvoiceComplete"
      | "getLockedFunds"
      | "getNftDeposits"
      | "getPayoutSchedule"
      | "getSupportingDocumentsComplete"
      | "getTierWinners"
      | "getTokenAddresses"
      | "getTokenAddressesCount"
      | "getTokenBalance"
      | "hasFundingGoal"
      | "initialize"
      | "invoiceComplete"
      | "invoiceRequired"
      | "isNFT"
      | "issuer"
      | "issuerExternalUserId"
      | "kycRequired"
      | "nftDepositLimit"
      | "nftDeposits"
      | "organization"
      | "payoutAddress"
      | "receiveFunds"
      | "receiveNft"
      | "refundDeposit"
      | "refunded"
      | "setFundingGoal"
      | "setInvoiceComplete"
      | "setInvoiceRequired"
      | "setKycRequired"
      | "setPayoutSchedule"
      | "setSupportingDocumentsComplete"
      | "setSupportingDocumentsRequired"
      | "setTierClaimed"
      | "setTierWinner"
      | "status"
      | "supportingDocumentsComplete"
      | "supportingDocumentsRequired"
      | "tier"
      | "tierClaimed"
      | "tierWinners"
      | "tokenAddress"
      | "tokenId"
      | "volume"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bountyClosedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bountyCreatedTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bountyId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bountyType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimNft",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTiered",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCompetition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closerData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendDeposit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "funder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportingDocumentsComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTierWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddressesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFundingGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      OpenQDefinitions.InitOperationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceComplete",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNFT",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issuerExternalUserId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kycRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftDepositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftDeposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "organization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payoutAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundDeposit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refunded",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingGoal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvoiceComplete",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvoiceRequired",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKycRequired",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutSchedule",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportingDocumentsComplete",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportingDocumentsRequired",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierClaimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierWinner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportingDocumentsComplete",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportingDocumentsRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tier",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tierClaimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tierWinners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "volume",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bountyClosedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bountyCreatedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bountyId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bountyType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTiered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closerData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportingDocumentsComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddressesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasFundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invoiceComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerExternalUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refunded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvoiceComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvoiceRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKycRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportingDocumentsComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportingDocumentsRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportingDocumentsComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportingDocumentsRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tierClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "volume", data: BytesLike): Result;

  events: {};
}

export interface ITieredPercentageBounty extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITieredPercentageBountyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bountyClosedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    bountyCreatedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    bountyId(overrides?: CallOverrides): Promise<[string]>;

    bountyType(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimNft(
      _payoutAddress: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTiered(
      _payoutAddress: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeCompetition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closer(overrides?: CallOverrides): Promise<[string]>;

    closerData(overrides?: CallOverrides): Promise<[string]>;

    depositTime(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extendDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _seconds: PromiseOrValue<BigNumberish>,
      _funder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    funder(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fundingGoal(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingToken(overrides?: CallOverrides): Promise<[string]>;

    getInvoiceComplete(overrides?: CallOverrides): Promise<[string]>;

    getLockedFunds(
      _depositId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNftDeposits(overrides?: CallOverrides): Promise<[string[]]>;

    getPayoutSchedule(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSupportingDocumentsComplete(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTierWinners(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenAddressesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenBalance(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasFundingGoal(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _bountyId: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      _organization: PromiseOrValue<string>,
      _openQ: PromiseOrValue<string>,
      _claimManager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _operation: OpenQDefinitions.InitOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invoiceComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoiceRequired(overrides?: CallOverrides): Promise<[boolean]>;

    isNFT(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issuer(overrides?: CallOverrides): Promise<[string]>;

    issuerExternalUserId(overrides?: CallOverrides): Promise<[string]>;

    kycRequired(overrides?: CallOverrides): Promise<[boolean]>;

    nftDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    organization(overrides?: CallOverrides): Promise<[string]>;

    payoutAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    receiveFunds(
      _funder: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveNft(
      _sender: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _funder: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refunded(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setFundingGoal(
      _fundingToken: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInvoiceComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInvoiceRequired(
      _invoiceRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKycRequired(
      _kycRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayoutSchedule(
      _payoutSchedule: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportingDocumentsComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportingDocumentsRequired(
      _supportingDocumentsRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTierWinner(
      _winner: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportingDocumentsComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportingDocumentsRequired(overrides?: CallOverrides): Promise<[boolean]>;

    tier(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tierWinners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    volume(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bountyClosedTime(overrides?: CallOverrides): Promise<BigNumber>;

  bountyCreatedTime(overrides?: CallOverrides): Promise<BigNumber>;

  bountyId(overrides?: CallOverrides): Promise<string>;

  bountyType(overrides?: CallOverrides): Promise<BigNumber>;

  claimNft(
    _payoutAddress: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTiered(
    _payoutAddress: PromiseOrValue<string>,
    _tier: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeCompetition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closer(overrides?: CallOverrides): Promise<string>;

  closerData(overrides?: CallOverrides): Promise<string>;

  depositTime(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  expiration(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extendDeposit(
    _depositId: PromiseOrValue<BytesLike>,
    _seconds: PromiseOrValue<BigNumberish>,
    _funder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  funder(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

  fundingToken(overrides?: CallOverrides): Promise<string>;

  getInvoiceComplete(overrides?: CallOverrides): Promise<string>;

  getLockedFunds(
    _depositId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNftDeposits(overrides?: CallOverrides): Promise<string[]>;

  getPayoutSchedule(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSupportingDocumentsComplete(overrides?: CallOverrides): Promise<string>;

  getTierWinners(overrides?: CallOverrides): Promise<string[]>;

  getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

  getTokenAddressesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenBalance(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasFundingGoal(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _bountyId: PromiseOrValue<string>,
    _issuer: PromiseOrValue<string>,
    _organization: PromiseOrValue<string>,
    _openQ: PromiseOrValue<string>,
    _claimManager: PromiseOrValue<string>,
    _depositManager: PromiseOrValue<string>,
    _operation: OpenQDefinitions.InitOperationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invoiceComplete(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoiceRequired(overrides?: CallOverrides): Promise<boolean>;

  isNFT(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issuer(overrides?: CallOverrides): Promise<string>;

  issuerExternalUserId(overrides?: CallOverrides): Promise<string>;

  kycRequired(overrides?: CallOverrides): Promise<boolean>;

  nftDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  nftDeposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  organization(overrides?: CallOverrides): Promise<string>;

  payoutAddress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  receiveFunds(
    _funder: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _volume: PromiseOrValue<BigNumberish>,
    _expiration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveNft(
    _sender: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _expiration: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundDeposit(
    _depositId: PromiseOrValue<BytesLike>,
    _funder: PromiseOrValue<string>,
    _volume: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refunded(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFundingGoal(
    _fundingToken: PromiseOrValue<string>,
    _fundingGoal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInvoiceComplete(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInvoiceRequired(
    _invoiceRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKycRequired(
    _kycRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayoutSchedule(
    _payoutSchedule: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportingDocumentsComplete(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportingDocumentsRequired(
    _supportingDocumentsRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTierClaimed(
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTierWinner(
    _winner: PromiseOrValue<string>,
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<BigNumber>;

  supportingDocumentsComplete(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportingDocumentsRequired(overrides?: CallOverrides): Promise<boolean>;

  tier(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tierClaimed(
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tierWinners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenAddress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  volume(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    bountyClosedTime(overrides?: CallOverrides): Promise<BigNumber>;

    bountyCreatedTime(overrides?: CallOverrides): Promise<BigNumber>;

    bountyId(overrides?: CallOverrides): Promise<string>;

    bountyType(overrides?: CallOverrides): Promise<BigNumber>;

    claimNft(
      _payoutAddress: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTiered(
      _payoutAddress: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCompetition(overrides?: CallOverrides): Promise<void>;

    closer(overrides?: CallOverrides): Promise<string>;

    closerData(overrides?: CallOverrides): Promise<string>;

    depositTime(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _seconds: PromiseOrValue<BigNumberish>,
      _funder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    funder(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    fundingToken(overrides?: CallOverrides): Promise<string>;

    getInvoiceComplete(overrides?: CallOverrides): Promise<string>;

    getLockedFunds(
      _depositId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftDeposits(overrides?: CallOverrides): Promise<string[]>;

    getPayoutSchedule(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSupportingDocumentsComplete(overrides?: CallOverrides): Promise<string>;

    getTierWinners(overrides?: CallOverrides): Promise<string[]>;

    getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

    getTokenAddressesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFundingGoal(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _bountyId: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      _organization: PromiseOrValue<string>,
      _openQ: PromiseOrValue<string>,
      _claimManager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _operation: OpenQDefinitions.InitOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    invoiceComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoiceRequired(overrides?: CallOverrides): Promise<boolean>;

    isNFT(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issuer(overrides?: CallOverrides): Promise<string>;

    issuerExternalUserId(overrides?: CallOverrides): Promise<string>;

    kycRequired(overrides?: CallOverrides): Promise<boolean>;

    nftDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    nftDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    organization(overrides?: CallOverrides): Promise<string>;

    payoutAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    receiveFunds(
      _funder: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    receiveNft(
      _sender: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    refundDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _funder: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refunded(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFundingGoal(
      _fundingToken: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvoiceComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvoiceRequired(
      _invoiceRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKycRequired(
      _kycRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayoutSchedule(
      _payoutSchedule: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportingDocumentsComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportingDocumentsRequired(
      _supportingDocumentsRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTierWinner(
      _winner: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    supportingDocumentsComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportingDocumentsRequired(overrides?: CallOverrides): Promise<boolean>;

    tier(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tierWinners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volume(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bountyClosedTime(overrides?: CallOverrides): Promise<BigNumber>;

    bountyCreatedTime(overrides?: CallOverrides): Promise<BigNumber>;

    bountyId(overrides?: CallOverrides): Promise<BigNumber>;

    bountyType(overrides?: CallOverrides): Promise<BigNumber>;

    claimNft(
      _payoutAddress: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTiered(
      _payoutAddress: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeCompetition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closer(overrides?: CallOverrides): Promise<BigNumber>;

    closerData(overrides?: CallOverrides): Promise<BigNumber>;

    depositTime(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _seconds: PromiseOrValue<BigNumberish>,
      _funder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    funder(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    fundingToken(overrides?: CallOverrides): Promise<BigNumber>;

    getInvoiceComplete(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedFunds(
      _depositId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutSchedule(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportingDocumentsComplete(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTierWinners(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddressesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bountyId: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      _organization: PromiseOrValue<string>,
      _openQ: PromiseOrValue<string>,
      _claimManager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _operation: OpenQDefinitions.InitOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invoiceComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceRequired(overrides?: CallOverrides): Promise<BigNumber>;

    isNFT(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuer(overrides?: CallOverrides): Promise<BigNumber>;

    issuerExternalUserId(overrides?: CallOverrides): Promise<BigNumber>;

    kycRequired(overrides?: CallOverrides): Promise<BigNumber>;

    nftDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    nftDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organization(overrides?: CallOverrides): Promise<BigNumber>;

    payoutAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveFunds(
      _funder: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveNft(
      _sender: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _funder: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refunded(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFundingGoal(
      _fundingToken: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInvoiceComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInvoiceRequired(
      _invoiceRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKycRequired(
      _kycRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayoutSchedule(
      _payoutSchedule: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportingDocumentsComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportingDocumentsRequired(
      _supportingDocumentsRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTierWinner(
      _winner: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    supportingDocumentsComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportingDocumentsRequired(overrides?: CallOverrides): Promise<BigNumber>;

    tier(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierWinners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volume(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bountyClosedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bountyCreatedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bountyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bountyType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimNft(
      _payoutAddress: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTiered(
      _payoutAddress: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeCompetition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closerData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTime(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiration(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _seconds: PromiseOrValue<BigNumberish>,
      _funder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    funder(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingGoal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvoiceComplete(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedFunds(
      _depositId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutSchedule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportingDocumentsComplete(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTierWinners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddressesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalance(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasFundingGoal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bountyId: PromiseOrValue<string>,
      _issuer: PromiseOrValue<string>,
      _organization: PromiseOrValue<string>,
      _openQ: PromiseOrValue<string>,
      _claimManager: PromiseOrValue<string>,
      _depositManager: PromiseOrValue<string>,
      _operation: OpenQDefinitions.InitOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invoiceComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNFT(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuerExternalUserId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftDepositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveFunds(
      _funder: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveNft(
      _sender: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _expiration: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundDeposit(
      _depositId: PromiseOrValue<BytesLike>,
      _funder: PromiseOrValue<string>,
      _volume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refunded(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFundingGoal(
      _fundingToken: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInvoiceComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInvoiceRequired(
      _invoiceRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKycRequired(
      _kycRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayoutSchedule(
      _payoutSchedule: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportingDocumentsComplete(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportingDocumentsRequired(
      _supportingDocumentsRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTierWinner(
      _winner: PromiseOrValue<string>,
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportingDocumentsComplete(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportingDocumentsRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tier(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierClaimed(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierWinners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volume(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
