/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IOpenQInterface extends utils.Interface {
  functions: {
    "addressToExternalUserId(address)": FunctionFragment;
    "bountyAddressToBountyId(address)": FunctionFragment;
    "externalUserIdToAddress(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressToExternalUserId"
      | "bountyAddressToBountyId"
      | "externalUserIdToAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressToExternalUserId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bountyAddressToBountyId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "externalUserIdToAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToExternalUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bountyAddressToBountyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalUserIdToAddress",
    data: BytesLike
  ): Result;

  events: {
    "BountyClosed(string,address,string,address,uint256,uint256,bytes,uint256)": EventFragment;
    "BountyCreated(string,string,address,address,uint256,uint256,bytes,uint256)": EventFragment;
    "ExternalUserIdAssociatedWithAddress(string,address,string,address,bytes,uint256)": EventFragment;
    "FundingGoalSet(address,address,uint256,uint256,bytes,uint256)": EventFragment;
    "InvoiceCompleteSet(address,uint256,bytes,uint256)": EventFragment;
    "InvoiceRequiredSet(address,bool,uint256,bytes,uint256)": EventFragment;
    "KYCRequiredSet(address,bool,uint256,bytes,uint256)": EventFragment;
    "PayoutScheduleSet(address,address,uint256[],uint256,bytes,uint256)": EventFragment;
    "PayoutSet(address,address,uint256,uint256,bytes,uint256)": EventFragment;
    "SupportingDocumentsCompleteSet(address,uint256,bytes,uint256)": EventFragment;
    "SupportingDocumentsRequiredSet(address,bool,uint256,bytes,uint256)": EventFragment;
    "TierClaimed(address,address,bytes,uint256)": EventFragment;
    "TierWinnerSelected(address,string[],bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BountyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BountyCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExternalUserIdAssociatedWithAddress"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingGoalSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvoiceCompleteSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvoiceRequiredSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KYCRequiredSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutScheduleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupportingDocumentsCompleteSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SupportingDocumentsRequiredSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierWinnerSelected"): EventFragment;
}

export interface BountyClosedEventObject {
  bountyId: string;
  bountyAddress: string;
  organization: string;
  closer: string;
  bountyClosedTime: BigNumber;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type BountyClosedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string, BigNumber],
  BountyClosedEventObject
>;

export type BountyClosedEventFilter = TypedEventFilter<BountyClosedEvent>;

export interface BountyCreatedEventObject {
  bountyId: string;
  organization: string;
  issuerAddress: string;
  bountyAddress: string;
  bountyMintTime: BigNumber;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type BountyCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string, BigNumber],
  BountyCreatedEventObject
>;

export type BountyCreatedEventFilter = TypedEventFilter<BountyCreatedEvent>;

export interface ExternalUserIdAssociatedWithAddressEventObject {
  newExternalUserId: string;
  newAddress: string;
  formerExternalUserId: string;
  formerAddress: string;
  data: string;
  version: BigNumber;
}
export type ExternalUserIdAssociatedWithAddressEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  ExternalUserIdAssociatedWithAddressEventObject
>;

export type ExternalUserIdAssociatedWithAddressEventFilter =
  TypedEventFilter<ExternalUserIdAssociatedWithAddressEvent>;

export interface FundingGoalSetEventObject {
  bountyAddress: string;
  fundingGoalTokenAddress: string;
  fundingGoalVolume: BigNumber;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type FundingGoalSetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  FundingGoalSetEventObject
>;

export type FundingGoalSetEventFilter = TypedEventFilter<FundingGoalSetEvent>;

export interface InvoiceCompleteSetEventObject {
  bountyAddress: string;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type InvoiceCompleteSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  InvoiceCompleteSetEventObject
>;

export type InvoiceCompleteSetEventFilter =
  TypedEventFilter<InvoiceCompleteSetEvent>;

export interface InvoiceRequiredSetEventObject {
  bountyAddress: string;
  invoiceRequired: boolean;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type InvoiceRequiredSetEvent = TypedEvent<
  [string, boolean, BigNumber, string, BigNumber],
  InvoiceRequiredSetEventObject
>;

export type InvoiceRequiredSetEventFilter =
  TypedEventFilter<InvoiceRequiredSetEvent>;

export interface KYCRequiredSetEventObject {
  bountyAddress: string;
  kycRequired: boolean;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type KYCRequiredSetEvent = TypedEvent<
  [string, boolean, BigNumber, string, BigNumber],
  KYCRequiredSetEventObject
>;

export type KYCRequiredSetEventFilter = TypedEventFilter<KYCRequiredSetEvent>;

export interface PayoutScheduleSetEventObject {
  bountyAddress: string;
  payoutTokenAddress: string;
  payoutSchedule: BigNumber[];
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type PayoutScheduleSetEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, string, BigNumber],
  PayoutScheduleSetEventObject
>;

export type PayoutScheduleSetEventFilter =
  TypedEventFilter<PayoutScheduleSetEvent>;

export interface PayoutSetEventObject {
  bountyAddress: string;
  payoutTokenAddress: string;
  payoutTokenVolume: BigNumber;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type PayoutSetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  PayoutSetEventObject
>;

export type PayoutSetEventFilter = TypedEventFilter<PayoutSetEvent>;

export interface SupportingDocumentsCompleteSetEventObject {
  bountyAddress: string;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type SupportingDocumentsCompleteSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  SupportingDocumentsCompleteSetEventObject
>;

export type SupportingDocumentsCompleteSetEventFilter =
  TypedEventFilter<SupportingDocumentsCompleteSetEvent>;

export interface SupportingDocumentsRequiredSetEventObject {
  bountyAddress: string;
  supportingDocuments: boolean;
  bountyType: BigNumber;
  data: string;
  version: BigNumber;
}
export type SupportingDocumentsRequiredSetEvent = TypedEvent<
  [string, boolean, BigNumber, string, BigNumber],
  SupportingDocumentsRequiredSetEventObject
>;

export type SupportingDocumentsRequiredSetEventFilter =
  TypedEventFilter<SupportingDocumentsRequiredSetEvent>;

export interface TierClaimedEventObject {
  bountyAddress: string;
  claimant: string;
  data: string;
  version: BigNumber;
}
export type TierClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TierClaimedEventObject
>;

export type TierClaimedEventFilter = TypedEventFilter<TierClaimedEvent>;

export interface TierWinnerSelectedEventObject {
  bountyAddress: string;
  tierWinners: string[];
  data: string;
  version: BigNumber;
}
export type TierWinnerSelectedEvent = TypedEvent<
  [string, string[], string, BigNumber],
  TierWinnerSelectedEventObject
>;

export type TierWinnerSelectedEventFilter =
  TypedEventFilter<TierWinnerSelectedEvent>;

export interface IOpenQ extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpenQInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToExternalUserId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bountyAddressToBountyId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    externalUserIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressToExternalUserId(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bountyAddressToBountyId(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  externalUserIdToAddress(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressToExternalUserId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    bountyAddressToBountyId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    externalUserIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BountyClosed(string,address,string,address,uint256,uint256,bytes,uint256)"(
      bountyId?: null,
      bountyAddress?: null,
      organization?: null,
      closer?: null,
      bountyClosedTime?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): BountyClosedEventFilter;
    BountyClosed(
      bountyId?: null,
      bountyAddress?: null,
      organization?: null,
      closer?: null,
      bountyClosedTime?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): BountyClosedEventFilter;

    "BountyCreated(string,string,address,address,uint256,uint256,bytes,uint256)"(
      bountyId?: null,
      organization?: null,
      issuerAddress?: null,
      bountyAddress?: null,
      bountyMintTime?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): BountyCreatedEventFilter;
    BountyCreated(
      bountyId?: null,
      organization?: null,
      issuerAddress?: null,
      bountyAddress?: null,
      bountyMintTime?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): BountyCreatedEventFilter;

    "ExternalUserIdAssociatedWithAddress(string,address,string,address,bytes,uint256)"(
      newExternalUserId?: null,
      newAddress?: null,
      formerExternalUserId?: null,
      formerAddress?: null,
      data?: null,
      version?: null
    ): ExternalUserIdAssociatedWithAddressEventFilter;
    ExternalUserIdAssociatedWithAddress(
      newExternalUserId?: null,
      newAddress?: null,
      formerExternalUserId?: null,
      formerAddress?: null,
      data?: null,
      version?: null
    ): ExternalUserIdAssociatedWithAddressEventFilter;

    "FundingGoalSet(address,address,uint256,uint256,bytes,uint256)"(
      bountyAddress?: null,
      fundingGoalTokenAddress?: null,
      fundingGoalVolume?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): FundingGoalSetEventFilter;
    FundingGoalSet(
      bountyAddress?: null,
      fundingGoalTokenAddress?: null,
      fundingGoalVolume?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): FundingGoalSetEventFilter;

    "InvoiceCompleteSet(address,uint256,bytes,uint256)"(
      bountyAddress?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): InvoiceCompleteSetEventFilter;
    InvoiceCompleteSet(
      bountyAddress?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): InvoiceCompleteSetEventFilter;

    "InvoiceRequiredSet(address,bool,uint256,bytes,uint256)"(
      bountyAddress?: null,
      invoiceRequired?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): InvoiceRequiredSetEventFilter;
    InvoiceRequiredSet(
      bountyAddress?: null,
      invoiceRequired?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): InvoiceRequiredSetEventFilter;

    "KYCRequiredSet(address,bool,uint256,bytes,uint256)"(
      bountyAddress?: null,
      kycRequired?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): KYCRequiredSetEventFilter;
    KYCRequiredSet(
      bountyAddress?: null,
      kycRequired?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): KYCRequiredSetEventFilter;

    "PayoutScheduleSet(address,address,uint256[],uint256,bytes,uint256)"(
      bountyAddress?: null,
      payoutTokenAddress?: null,
      payoutSchedule?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): PayoutScheduleSetEventFilter;
    PayoutScheduleSet(
      bountyAddress?: null,
      payoutTokenAddress?: null,
      payoutSchedule?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): PayoutScheduleSetEventFilter;

    "PayoutSet(address,address,uint256,uint256,bytes,uint256)"(
      bountyAddress?: null,
      payoutTokenAddress?: null,
      payoutTokenVolume?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): PayoutSetEventFilter;
    PayoutSet(
      bountyAddress?: null,
      payoutTokenAddress?: null,
      payoutTokenVolume?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): PayoutSetEventFilter;

    "SupportingDocumentsCompleteSet(address,uint256,bytes,uint256)"(
      bountyAddress?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): SupportingDocumentsCompleteSetEventFilter;
    SupportingDocumentsCompleteSet(
      bountyAddress?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): SupportingDocumentsCompleteSetEventFilter;

    "SupportingDocumentsRequiredSet(address,bool,uint256,bytes,uint256)"(
      bountyAddress?: null,
      supportingDocuments?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): SupportingDocumentsRequiredSetEventFilter;
    SupportingDocumentsRequiredSet(
      bountyAddress?: null,
      supportingDocuments?: null,
      bountyType?: null,
      data?: null,
      version?: null
    ): SupportingDocumentsRequiredSetEventFilter;

    "TierClaimed(address,address,bytes,uint256)"(
      bountyAddress?: null,
      claimant?: null,
      data?: null,
      version?: null
    ): TierClaimedEventFilter;
    TierClaimed(
      bountyAddress?: null,
      claimant?: null,
      data?: null,
      version?: null
    ): TierClaimedEventFilter;

    "TierWinnerSelected(address,string[],bytes,uint256)"(
      bountyAddress?: null,
      tierWinners?: null,
      data?: null,
      version?: null
    ): TierWinnerSelectedEventFilter;
    TierWinnerSelected(
      bountyAddress?: null,
      tierWinners?: null,
      data?: null,
      version?: null
    ): TierWinnerSelectedEventFilter;
  };

  estimateGas: {
    addressToExternalUserId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bountyAddressToBountyId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    externalUserIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToExternalUserId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bountyAddressToBountyId(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    externalUserIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
